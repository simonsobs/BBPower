# These parameters are accessible to all stages
global:
    nside: 64
    compute_dell: True

BBPowerSpecter:
    # Bandpower definition
    bpw_edges: "./examples/test_data/bpw_edges.txt"
    purify_B: True
    n_iter : 3

BBPowerSummarizer:
    # Covariance types
    nulls_covar_type: "diagonal"
    nulls_covar_diag_order: 0
    data_covar_type: "block_diagonal"
    data_covar_diag_order: 0

BBCompSep:
    # Sampler type (choose 'emcee' or 'polychord' for ellwise compsep)
    sampler: 'emcee'
    # If you chose polychord:
    nlive: 50
    nrepeat: 50
    # If you chose emcee (note higher nwalkers for ellwise compsep):
    nwalkers: 96
    n_iters: 5000
    # Likelihood type (choose 'chi2' or 'h&l')
    likelihood_type: 'chi2'
    # What is the starting point?
    r_init: 1.e-3
    # Which polarization channels do you want to include?
    pol_channels: ['B']
    # Scale cuts (will apply to all frequencies)
    l_min: 30
    l_max: 120

    # CMB model
    cmb_model:
        # Inference targets CMB bandpowers
        use_ellwise: True
        # Template power spectrum. Should contained the lensed power spectra
        # with r=0 and r=1 respectively.
        cmb_templates: ["./examples/data/camb_lens_nobb.dat", 
                        "./examples/data/camb_lens_r1.dat"]
        # Free parameters
        params:
            # CMB bandpower amplitudes. This assumes 9 bandpowers with 
            # delta_ell = 10, ell in [30, 120]. 
            # Append more parameters if needed.
            A_cmb_01: ['A_cmb_01', 'tophat', [0.,1.,2.]]
            A_cmb_02: ['A_cmb_02', 'tophat', [0.,1.,2.]]
            A_cmb_03: ['A_cmb_03', 'tophat', [0.,1.,2.]]
            A_cmb_04: ['A_cmb_04', 'tophat', [0.,1.,2.]]
            A_cmb_05: ['A_cmb_05', 'tophat', [0.,1.,2.]]
            A_cmb_06: ['A_cmb_06', 'tophat', [0.,1.,2.]]
            A_cmb_07: ['A_cmb_07', 'tophat', [0.,1.,2.]]
            A_cmb_08: ['A_cmb_08', 'tophat', [0.,1.,2.]]
            A_cmb_09: ['A_cmb_09', 'tophat', [0.,1.,2.]]

    # Foreground model
    fg_model:
        # Add one section per component. They should be called `component_X`,
        # starting with X=1
        component_1:
            # Name for this component
            name: Dust
            # Type of SED. Should be one of the classes stored in fgbuster.components
            # https://github.com/fgbuster/fgbuster/blob/master/fgbuster/component_model.py
            sed: Dust
            # Type of power spectra for all possible polarization channel combinations.
            # Any combinations not added here will be assumed to be zero.
            # The names should be one of the classes in bbpower/fgcls.py
            cl:
                EE: ClPowerLaw
                BB: ClPowerLaw
            # Parameters of the SED
            sed_parameters:
                # The key can be anything you want, but each parameter in the model
                # must have a different name.
                # The first item in the list is the name of the parameter used by fgbuster
                # The second item is the type of prior. The last item are the numbers
                # necessary to define the prior. They should be:
                #  - Gaussian: [mean,sigma]
                #  - tophat: [lower edge, start value, upper edge]
                #  - fixed: [parameter value]
                # nu0-type parameters can only be fixed.
                beta_d: ['beta_d', 'Gaussian', [1.59, 0.11]]
                temp_d: ['temp', 'fixed', [19.6]]
                nu0_d: ['nu0', 'fixed', [353.]]
            cl_parameters:
                # Same for power spectrum parameters
                # (broken down by polarization channel combinations)
                EE:
                   amp_d_ee: ['amp', 'tophat', [0., 10., 20.]]
                   alpha_d_ee: ['alpha', 'tophat', [-1., -0.42, 0.]]
                   l0_d_ee: ['ell0', 'fixed', [80.]]
                BB:
                   amp_d_bb: ['amp', 'tophat', [0., 5., 10.]]
                   alpha_d_bb: ['alpha', 'tophat', [-1., -0.2, 0.]]
                   l0_d_bb: ['ell0', 'fixed', [80.]]
            # If this component should be correlated with any other, list them here
            cross:
                # In this case the list should contain:
                # [component name, prior type, prior parameters]
                epsilon_ds: ['component_2', 'tophat', [-1., 0., 1.]]

        component_2:
            name: Synchrotron
            sed: Synchrotron
            cl:
                EE: ClPowerLaw
                BB: ClPowerLaw
            sed_parameters:
                beta_s: ['beta_pl', 'Gaussian', [-3.0, 0.3]]
                nu0_s: ['nu0', 'fixed', [23.]]
            cl_parameters:
                EE:
                    amp_s_ee: ['amp', 'tophat', [0., 4., 8.]]
                    alpha_s_ee: ['alpha', 'tophat', [-1., -0.6, 0.]]
                    l0_s_ee: ['ell0', 'fixed', [80.]]
                BB:
                    amp_s_bb: ['amp', 'tophat', [0., 2., 4.]]
                    alpha_s_bb: ['alpha', 'tophat', [-1., -0.4, 0.]]
                    l0_s_bb: ['ell0', 'fixed', [80.]]

BBEllwise:
    # Sampler used by BBCompSep to produce ellwise chains ('emcee' or 'polychord')
    sampler: 'emcee'
    # Re-insert CMB amplitudes in sampler to check (r, A_lens)?
    validation: True
    fid_spec_r0: './examples/data/camb_lens_nobb.dat'
    fid_spec_r1: './examples/data/camb_lens_r1.dat'
    bin_edges_path: './examples/test_data/bpw_edges.txt'
    lmin: 30
    lmax: 120
