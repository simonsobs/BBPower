# These parameters are accessible to all stages
global:
    nside: 512
    compute_dell: True

BBPowerSpecter:
    # Bandpower definition
    bpw_edges: "/global/homes/s/susannaz/BBPower/examples/data/bpw_edges.txt"
    purify_B: True
    n_iter : 3
    # Activates parallelization with mpi4py
    parallel: False

BBPowerSummarizer:
    # Covariance types
    nulls_covar_type: "diagonal"
    nulls_covar_diag_order: 0
    data_covar_type: "ZZ"    
    data_covar_diag_order: 0
    
BBCompSep:
    # Sampler type (choose 'emcee', 'polychord', 'maximum_likelihood', 
    # 'single_point' or 'timing')
    sampler: 'emcee'
    # If you chose polychord:
    nlive: 50
    nrepeat: 50
    # If you chose emcee:
    nwalkers: 128
    n_iters: 2000
    # Likelihood type (choose 'chi2' or 'h&l')
    likelihood_type: 'chi2'
    # What is the starting point?
    r_init: 1.e-3
    # Which polarization channels do you want to include?
    pol_channels: ['B']
    # Scale cuts (will apply to all frequencies)
    l_min: 30
    l_max: 300
    diff: True

    # CMB model
    cmb_model:
        # Template power spectrum. Should contained the lensed power spectra
        # with r=0 and r=1 respectively.
        cmb_templates: ['/global/homes/s/susannaz/BBPower/examples/data/camb_lens_nobb_nico.dat',
                        '/global/homes/s/susannaz/BBPower/examples/data/camb_lens_r1_nico.dat']
        # Free parameters
        params:
            # tensor-to-scalar ratio
            # See below for the meaning of the different elements in the list.
            r_tensor: ['r_tensor', 'tophat', [-0.1, 0.00, 0.1]]
            # Lensing amplitude
            A_lens: ['A_lens', 'tophat', [0.00, 1.0, 2.00]]
	    
    # If diff: True	    
    resid_seds: ODIR/0X/masked_hybrid_params_0Y.npz
    
    # Foreground model
    fg_model:
        use_moments: False
        # Add one section per component. They should be called `component_X`,
        # starting with X=1
        component_1:
            # Name for this component
            name: Dust
            # Type of SED. Should be one of the classes stored in fgbuster.components
            # https://github.com/fgbuster/fgbuster/blob/master/fgbuster/component_model.py
            sed: Dust
            # Type of power spectra for all possible polarization channel combinations.
            # Any combinations not added here will be assumed to be zero.
            # The names should be one of the classes in bbpower/fgcls.py
            cl:
                EE: ClPowerLaw
                BB: ClPowerLaw
            # Parameters of the SED
            sed_parameters:
                # The key can be anything you want, but each parameter in the model
                # must have a different name.
                # The first item in the list is the name of the parameter used by fgbuster
                # The second item is the type of prior. The last item are the numbers
                # necessary to define the prior. They should be:
                #  - Gaussian: [mean,sigma]
                #  - tophat: [lower edge, start value, upper edge]
                #  - fixed: [parameter value]
                # nu0-type parameters can only be fixed.
                beta_d: ['beta_d', 'Gaussian', [1.54, 0.2]]
                temp_d: ['temp', 'fixed', [20.]]
                nu0_d: ['nu0', 'fixed', [353.]]
            cl_parameters:
                # Same for power spectrum parameters
                # (broken down by polarization channel combinations)
                EE:
                   amp_d_ee: ['amp', 'tophat', [40., 56., 80.]]
                   alpha_d_ee: ['alpha', 'tophat', [-1., -0.32, 0.]]
                   l0_d_ee: ['ell0', 'fixed', [80.]]
                BB:
                   amp_d_bb: ['amp', 'tophat', [0., 10., "inf"]]
                   alpha_d_bb: ['alpha', 'tophat', [-1, -0.42, 0.]]
                   l0_d_bb: ['ell0', 'fixed', [80.]]
            # If this component should be correlated with any other, list them here
            cross:
                # In this case the list should contain:
                # [component name, prior type, prior parameters]
                epsilon_ds: ['component_2', 'tophat', [-0.001, 0., 0.001]]

        component_2:
            name: Synchrotron
            sed: Synchrotron
            cl:
                EE: ClPowerLaw
                BB: ClPowerLaw
            sed_parameters:
                beta_s: ['beta_pl', 'Gaussian', [-3.0, 0.3]]
                nu0_s: ['nu0', 'fixed', [23.]]
            cl_parameters:
                EE:
                    amp_s_ee: ['amp', 'tophat', [5., 9., 15.]]
                    alpha_s_ee: ['alpha', 'tophat', [-2., -0.7, 0.]]
                    l0_s_ee: ['ell0', 'fixed', [80.]]
                BB:
                    amp_s_bb: ['amp', 'tophat', [0., 0.05, "inf"]]
                    alpha_s_bb: ['alpha', 'tophat', [-2., -0.93, 0.]]
                    l0_s_bb: ['ell0', 'fixed', [80.]]

BBPlotter:
    lmax_plot: 300
    plot_coadded_total: False
    plot_noise: False
    plot_nulls: False
    plot_likelihood: True
